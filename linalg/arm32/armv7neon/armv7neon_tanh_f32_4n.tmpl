// vim: ft=arm

    .arm
    .text
    .global armv7neon_tanh_f32_4n
    .type armv7neon_tanh_f32_4n, %function

/*
    s16–s31 (d8–d15, q4–q7) must be preserved
    s0–s15 (d0–d7, q0–q3) and d16–d31 (q8–q15) do not need to be preserved
*/

armv7neon_tanh_f32_4n:
    cmp         r1, #0
    blxeq       lr

    vpush       { q4-q7 }

    adr         r2, .coeffs_num
    vldmia      r2!, { s0-s13 }

// q4 -> q4,5,6
// q5 -> q7,8,9
// q6 -> q10,11,12
// q7 -> q13,14,15

    cmp         r1, #12
    blt         .loop

.loop_3:
    vldmia      r0, { q4, q5, q6 }         // q4 <- x

    vdup.32     q15, d0[0]
    vmax.f32    q4, q15
    vmax.f32    q5, q15
    vmax.f32    q6, q15
    vdup.32     q15, d0[1]
    vmin.f32    q4, q15
    vmin.f32    q5, q15
    vmin.f32    q6, q15

    vmul.f32    q7, q4, q4          // q7 <- x2
    vmul.f32    q8, q5, q5
    vmul.f32    q9, q6, q6

    vdup.32     q10, d1[0]
    vdup.32     q11, d1[0]
    vdup.32     q12, d1[0]
    vdup.32     q13, d1[1]
    vdup.32     q14, d1[1]
    vdup.32     q15, d1[1]
    vmla.f32    q13, q7, q10
    vmla.f32    q14, q8, q11
    vmla.f32    q15, q9, q12
    vdup.32     q10, d2[0]
    vdup.32     q11, d2[0]
    vdup.32     q12, d2[0]
    vmla.f32    q10, q13, q7
    vmla.f32    q11, q14, q8
    vmla.f32    q12, q15, q9
    vdup.32     q13, d2[1]
    vdup.32     q14, d2[1]
    vdup.32     q15, d2[1]
    vmla.f32    q13, q7, q10
    vmla.f32    q14, q8, q11
    vmla.f32    q15, q9, q12
    vdup.32     q10, d3[0]
    vdup.32     q11, d3[0]
    vdup.32     q12, d3[0]
    vmla.f32    q10, q13, q7
    vmla.f32    q11, q14, q8
    vmla.f32    q12, q15, q9
    vdup.32     q13, d3[1]
    vdup.32     q14, d3[1]
    vdup.32     q15, d3[1]
    vmla.f32    q13, q7, q10
    vmla.f32    q14, q8, q11
    vmla.f32    q15, q9, q12
    vdup.32     q10, d4[0]
    vdup.32     q11, d4[0]
    vdup.32     q12, d4[0]
    vmla.f32    q10, q13, q7
    vmla.f32    q11, q14, q8
    vmla.f32    q12, q15, q9
    vmul.f32    q4, q4, q10          // q4 <- numerator
    vmul.f32    q5, q5, q11
    vmul.f32    q6, q6, q12

    vdup.32     q10, d4[1]
    vdup.32     q11, d4[1]
    vdup.32     q12, d4[1]
    vdup.32     q13, d5[0]
    vdup.32     q14, d5[0]
    vdup.32     q15, d5[0]
    vmla.f32    q13, q7, q10
    vmla.f32    q14, q8, q11
    vmla.f32    q15, q9, q12
    vdup.32     q10, d5[1]
    vdup.32     q11, d5[1]
    vdup.32     q12, d5[1]
    vmla.f32    q10, q13, q7
    vmla.f32    q11, q14, q8
    vmla.f32    q12, q15, q9
    vdup.32     q13, d6[0]
    vdup.32     q14, d6[0]
    vdup.32     q15, d6[0]
    vmla.f32    q13, q7, q10          // q13 <- denum
    vmla.f32    q14, q8, q11
    vmla.f32    q15, q9, q12

    vrecpe.f32  q7, q13
    vrecpe.f32  q8, q14
    vrecpe.f32  q9, q15
    vrecps.f32  q10, q7, q13
    vrecps.f32  q11, q8, q14
    vrecps.f32  q12, q9, q15
    vmul.f32    q7, q7, q10
    vmul.f32    q8, q8, q11
    vmul.f32    q9, q9, q12
    vrecps.f32  q10, q7, q13
    vrecps.f32  q11, q8, q14
    vrecps.f32  q12, q9, q15
    vmul.f32    q7, q7, q10          // q7 <- 1/q13
    vmul.f32    q8, q8, q11
    vmul.f32    q9, q9, q12

    vmul.f32    q10, q4, q7
    vmul.f32    q11, q5, q8
    vmul.f32    q12, q6, q9

    vstmia      r0!, { q10, q11, q12 }

    subs        r1, #12
    cmp         r1, #12
    bge         .loop_3

    cmp         r1, #0;
    beq         .return

.loop:
    vldmia      r0, { q4 }         // q4 <- x

    vdup.32     q15, d0[0]
    vmax.f32    q4, q15
    vdup.32     q15, d0[1]
    vmin.f32    q4, q15

    vmul.f32    q7, q4, q4          // q7 <- x2

    vdup.32     q10, d1[0]
    vdup.32     q13, d1[1]
    vmla.f32    q13, q7, q10
    vdup.32     q10, d2[0]
    vmla.f32    q10, q13, q7
    vdup.32     q13, d2[1]
    vmla.f32    q13, q7, q10
    vdup.32     q10, d3[0]
    vmla.f32    q10, q13, q7
    vdup.32     q13, d3[1]
    vmla.f32    q13, q7, q10
    vdup.32     q10, d4[0]
    vmla.f32    q10, q13, q7
    vmul.f32    q4, q4, q10          // q4 <- numerator

    vdup.32     q10, d4[1]
    vdup.32     q13, d5[0]
    vmla.f32    q13, q7, q10
    vdup.32     q10, d5[1]
    vmla.f32    q10, q13, q7
    vdup.32     q13, d6[0]
    vmla.f32    q13, q7, q10          // q13 <- denum

    vrecpe.f32  q7, q13
    vrecps.f32  q10, q7, q13
    vmul.f32    q7, q7, q10
    vrecps.f32  q10, q7, q13
    vmul.f32    q7, q7, q10          // q7 <- 1/q13

    vmul.f32    q10, q4, q7

    vstmia      r0!, { q10 }

    subs        r1, #4;
    bne         .loop

.return:
    vpop        { q4-q7 }
    bx          lr

.coeffs_num:
    .float -9.0                     // low          s0   d0   q0
    .float 9.0                      // high         s1
    .float -2.76076847742355e-16    // alpha_13     s2   d1  
    .float 2.00018790482477e-13     // alpha_11     s3
    .float -8.60467152213735e-11    // alpha_9      s4   d2   q1
    .float 5.12229709037114e-08     // alpha_7      s5
    .float 1.48572235717979e-05     // alpha_5      s6   d3
    .float 6.37261928875436e-04     // alpha_3      s7
    .float 4.89352455891786e-03     // alpha_1      s8   d4   q2
    .float 1.19825839466702e-06     // beta_6       s9
    .float 1.18534705686654e-04     // beta_4       s10  d5 
    .float 2.26843463243900e-03     // beta_2       s11
    .float 4.89352518554385e-03     // beta_0       s12  d6   q3
